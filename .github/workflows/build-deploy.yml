name: Build and Deploy to Artifactory

on:
  push:
    branches:
      - main
      - master

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Run Tests with Code Coverage
        run: mvn verify --batch-mode

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean package --batch-mode

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
          version: 'latest'

      - name: Configure JFrog CLI
        run: |
          jf config add my-server \
            --url="${{ secrets.ARTIFACTORY_URL }}" \
            --user="${{ secrets.ARTIFACTORY_USER }}" \
            --password="${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" \
            --interactive=false

      - name: Remove HTTPS from ARTIFACTORY_URL
        run: echo "ARTIFACTORY_REGISTRY=${{ secrets.ARTIFACTORY_URL }}" | sed 's|https://||' >> $GITHUB_ENV
    
      - name: Generate Docker Image Version
        run: echo "IMAGE_VERSION=$(date +%Y%m%d%H%M%S)" >> $GITHUB_ENV
    
      - name: Build and Push Docker Image to JFrog Artifactory
        run: |
          IMAGE_TAG="${{ env.ARTIFACTORY_REGISTRY }}/dockerdemo-docker/spring-app:${{ env.IMAGE_VERSION }}"
          echo "Pushing Docker Image with tag: $IMAGE_TAG"
              
          echo "${{ secrets.ARTIFACTORY_ACCESS_TOKEN }}" | docker login -u ${{ secrets.ARTIFACTORY_USER }} --password-stdin ${{ env.ARTIFACTORY_REGISTRY }}
          echo "ARTIFACTORY_REGISTRY=${{ env.ARTIFACTORY_REGISTRY }}"
          echo "IMAGE_VERSION=${{ env.IMAGE_VERSION }}"
          docker build -t "$IMAGE_TAG" .
          docker push "$IMAGE_TAG"
    
      - name: Save Docker Image Version for Deployment
        run: echo "${{ env.IMAGE_VERSION }}" > image_version.txt
    
      - name: Upload Version Info to S3
        run: aws s3 cp image_version.txt s3://spring-app-artifactory/JFrog_Artifacts/
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}